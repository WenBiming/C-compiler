Terminals unused in grammar

    INT
    IF
    ELSE
    WHILE
    FOR
    RETURN
    BREAK
    CONTINUE
    ADD_ASSIGN
    SUB_ASSIGN
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    INC_OP
    DEC_OP
    AND_OP
    OR_OP
    GE_OP
    LE_OP
    EQ_OP
    NE_OP


Grammar

    0 $accept: start $end

    1 start: %empty
    2      | start E '\n'

    3 E: CONSTANT
    4  | IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 2
    error (256)
    INT (258)
    IDENTIFIER (259) 4
    CONSTANT (260) 3
    IF (261)
    ELSE (262)
    WHILE (263)
    FOR (264)
    RETURN (265)
    BREAK (266)
    CONTINUE (267)
    ADD_ASSIGN (268)
    SUB_ASSIGN (269)
    MUL_ASSIGN (270)
    DIV_ASSIGN (271)
    MOD_ASSIGN (272)
    INC_OP (273)
    DEC_OP (274)
    AND_OP (275)
    OR_OP (276)
    GE_OP (277)
    LE_OP (278)
    EQ_OP (279)
    NE_OP (280)


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    start (28)
        on left: 1 2
        on right: 0 2
    E (29)
        on left: 3 4
        on right: 2


State 0

    0 $accept: . start $end

    $default  reduce using rule 1 (start)

    start  go to state 1


State 1

    0 $accept: start . $end
    2 start: start . E '\n'

    $end        shift, and go to state 2
    IDENTIFIER  shift, and go to state 3
    CONSTANT    shift, and go to state 4

    E  go to state 5


State 2

    0 $accept: start $end .

    $default  accept


State 3

    4 E: IDENTIFIER .

    $default  reduce using rule 4 (E)


State 4

    3 E: CONSTANT .

    $default  reduce using rule 3 (E)


State 5

    2 start: start E . '\n'

    '\n'  shift, and go to state 6


State 6

    2 start: start E '\n' .

    $default  reduce using rule 2 (start)
